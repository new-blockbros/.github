name: Format, build and test

on:
  workflow_call:
    inputs:
      wasm:
        description: Whether the files are built to WASM
        type: boolean

jobs:
  get-env:
    name: Prepare environment variables

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.env.outputs.version }}
      working-directory: ${{ steps.env.outputs.working-directory }}

    steps:
      - name: Get version and working directory
        id: env
        run: |
          echo "version=1.20" >> $GITHUB_OUTPUT
          if [ ${{ inputs.wasm }} == 'true' ]; then
            echo "working-directory=./client" >> $GITHUB_OUTPUT
          else
            echo "working-directory=." >> $GITHUB_OUTPUT
          fi

  format:
    name: Run gofmt

    runs-on: ubuntu-latest

    needs: get-env

    defaults:
      run:
        working-directory: ${{ needs.get-env.outputs.working-directory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-env.outputs.version }}

      - name: Format
        run: if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi

  build-and-test:
    name: Run go test and go build

    runs-on: ubuntu-latest

    needs: get-env

    defaults:
      run:
        working-directory: ${{ needs.get-env.outputs.working-directory }}

    env:
      DISPLAY: ':99.0'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-env.outputs.version }}

      - name: Install deps of Ebitengine
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc xvfb libc6-dev libglu1-mesa-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config
        if: inputs.wasm

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest
        if: inputs.wasm

      - name: Install wasmbrowsertest
        run: go install github.com/agnivade/wasmbrowsertest@latest
        if: inputs.wasm

      - name: Setup go_js_wasm_exec
        run: mv $(go env GOPATH)/bin/wasmbrowsertest $(go env GOPATH)/bin/go_js_wasm_exec
        if: inputs.wasm

      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update go.mod
        run: go mod tidy

      - name: Test
        run: |
          set -euo pipefail
          GOOS=js GOARCH=wasm xvfb-run -a go test -json -v ./... > result
          cat result | tee /tmp/gotest.log | gotestfmt
          if [ $(cat result | grep '"Action":"fail"' | wc -l) -gt 0 ]; then
            echo "::error::go test failed."
            exit 1
          fi
        if: inputs.wasm

      - name: Test
        run: |
          set -euo pipefail
          go test -json -v ./... 2>&1 | tee /tmp/gotest.log | gotestfmt
        if: ${{ !inputs.wasm }}

      - name: Upload test log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-log
          path: /tmp/gotest.log
          if-no-files-found: error

      - name: Build
        run: go build ./...
        env:
          GOOS: js
          GOARCH: wasm
        if: inputs.wasm

      - name: Build
        run: go build ./...
        if: ${{ !inputs.wasm }}
